/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINEDITOR_H_4ACCBAA__
#define __PLUGINEDITOR_H_4ACCBAA__

#include "JuceHeader.h"
#include "PluginProcessor.h"

class MeterComponent;

//==============================================================================
/** This is the editor component that our filter will display.
*/
class JuceDemoPluginAudioProcessorEditor  : public AudioProcessorEditor,
                                            public SliderListener,
                                            public ButtonListener,
                                            public Timer
{
public:
    JuceDemoPluginAudioProcessorEditor (JuceDemoPluginAudioProcessor* ownerFilter);
    ~JuceDemoPluginAudioProcessorEditor();

    //==============================================================================
    void timerCallback() override;
    void paint (Graphics&) override;
    void resized() override;
    void sliderValueChanged (Slider*) override;
    void buttonClicked (Button*) override;

private:
    Label nameLabel, infoLabel, bypassLabel, modFreqLabel, modAmpLabel;
    Slider modFreqSlider, modAmpSlider;
    TextButton *bypassButton;
    ScopedPointer<ResizableCornerComponent> resizer;
    ComponentBoundsConstrainer resizeLimits;
    float *myMeterValue;
    ScopedPointer<MeterComponent> meterLeftChannel;
    ScopedPointer<MeterComponent> meterRightChannel;

    //AudioPlayHead::CurrentPositionInfo lastDisplayedPosition;
    JuceDemoPluginAudioProcessor* getProcessor() const
    {
        return static_cast <JuceDemoPluginAudioProcessor*> (getAudioProcessor());
    }

};

//================ meter component ================

class MeterComponent : public Component
{
public:
    
    MeterComponent();
    ~MeterComponent();
    void paint (Graphics &g) override;
    void setValue (float fMeterValue);
    float getValue ();
    
private:
    float m_fInternalValue;
};
















#endif  // __PLUGINEDITOR_H_4ACCBAA__
