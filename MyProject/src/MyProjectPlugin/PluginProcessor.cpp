/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

AudioProcessor* JUCE_CALLTYPE createPluginFilter();


//==============================================================================
// define default values
const float fdefaultModFreq  = 0.0f;
const float fdefaultModAmp   = 0.0f;
const float  bdefaultBypassStatus    = 0.0f;

//==============================================================================
JuceDemoPluginAudioProcessor::JuceDemoPluginAudioProcessor()
{
    // Set up some default values..
    modFreq      = fdefaultModFreq;
    modAmp       = fdefaultModAmp;
    bypassStatus = bdefaultBypassStatus;
    
    lastUIWidth = 400;
    lastUIHeight = 200;

    lastPosInfo.resetToDefault();
    
}

JuceDemoPluginAudioProcessor::~JuceDemoPluginAudioProcessor()
{
}

//==============================================================================
int JuceDemoPluginAudioProcessor::getNumParameters()
{
    return totalNumParams;
}

float JuceDemoPluginAudioProcessor::getParameter (int index)
{
    // This method will be called by the host, probably on the audio thread, so
    // it's absolutely time-critical. Don't use critical sections or anything
    // UI-related, or anything at all that may block in any way!
    switch (index)
    {
        case modFreqParam:     return modFreq;
        case modAmpParam:    return modAmp;
        case bypassParam: return bypassStatus;
        default:            return 0.0f;
    }
}



void JuceDemoPluginAudioProcessor::setParameter (int index, float newValue)
{
    // This method will be called by the host, probably on the audio thread, so
    // it's absolutely time-critical. Don't use critical sections or anything
    // UI-related, or anything at all that may block in any way!
    switch (index)
    {
        case modFreqParam: modFreq = newValue; break;
        case modAmpParam:  modAmp  = newValue; break;
        case bypassParam:  bypassStatus = newValue; break;
        default: break;
    }
}

float JuceDemoPluginAudioProcessor::getParameterDefaultValue (int index)
{
    switch (index)
    {
        case modFreqParam:     return fdefaultModFreq;
        case modAmpParam:      return fdefaultModAmp;
        case bypassParam:      return bdefaultBypassStatus;
        default:            break;
    }

    return 0.0f;
}

const String JuceDemoPluginAudioProcessor::getParameterName (int index)
{
    switch (index)
    {
        case modFreqParam:     return "modulation frequency";
        case modAmpParam:      return "modulation amplitude";
        case bypassParam:      return "bypass status";
        default:            break;
    }

    return String::empty;
}

const String JuceDemoPluginAudioProcessor::getParameterText (int index)
{
    return String (getParameter (index), 2);
}

//==============================================================================
void JuceDemoPluginAudioProcessor::prepareToPlay (double sampleRate, int /*samplesPerBlock*/)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    //int iNumOfChannels = this->getNumInputChannels();
    
    // Create instance here
    CMyProject::createInstance(m_pMyProject);
    CMyProject::createInstance(m_pMyProjectBypass);

    myPPM = new PPM(0.05, 1.2 , sampleRate, 2);
    x = new float[2];
    output = new float[2];
    
    // initialize MyProject here
    m_pMyProject->initInstance(fMaxDelayInS, sampleRate, idefaultChannel);
    
    m_pMyProjectBypass->initInstance(fMaxDelayInS, sampleRate, idefaultChannel);
    
    // parameters are always zeros for bypass block
    m_pMyProjectBypass->setParam(CMyProject::kParamModFreqInHz, 0.0f);
    m_pMyProjectBypass->setParam(CMyProject::kParamModWidthInS, 0.0f);
    
}

void JuceDemoPluginAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
    // Destroy instances here
    CMyProject::destroyInstance(m_pMyProject);
    CMyProject::destroyInstance(m_pMyProjectBypass);
    
}

void JuceDemoPluginAudioProcessor::reset()
{
    // Use this method as the place to clear any delay lines, buffers, etc, as it
    // means there's been a break in the audio's continuity.
    // delayBuffer.clear();
    m_pMyProject->resetInstance();
    m_pMyProjectBypass->resetInstance();
    
}


// ================process implementations ========================//

void JuceDemoPluginAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& junk)
{
    
    // set my filter parameters here
    m_pMyProject->setParam(CMyProject::kParamModFreqInHz, getParameter(modFreqParam));
    m_pMyProject->setParam(CMyProject::kParamModWidthInS, getParameter(modAmpParam));
    
    const int m_iNumSamples  = buffer.getNumSamples();
    const int m_iNumChannels = buffer.getNumChannels();
    float **m_ppInputBuffer  = buffer.getArrayOfChannels();
    
    if (getParameter(bypassParam) == 1.0)
    {
        this->processBlockBypassed(buffer, junk);
    }
    else
    {
        m_pMyProject->process(m_ppInputBuffer, m_ppInputBuffer, m_iNumSamples);
        
        for (int i = 0 ; i < m_iNumSamples; i++)
        {
            for (int j = 0 ;  j < m_iNumChannels ; j++)
            {
                x[j] = m_ppInputBuffer[j][i];
            }
            myPPM -> process(x, output);
        }
        
        
        
        buffer.setDataToReferTo(m_ppInputBuffer, m_iNumChannels, m_iNumSamples);
    }

    // In case we have more outputs than inputs, we'll clear any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // ask the host for the current time so we can display it...
    AudioPlayHead::CurrentPositionInfo newTime;

    if (getPlayHead() != nullptr && getPlayHead()->getCurrentPosition (newTime))
    {
        // Successfully got the current time from the host..
        lastPosInfo = newTime;
    }
    else
    {
        // If the host fails to fill-in the current time, we'll just clear it to a default..
        lastPosInfo.resetToDefault();
    }
}


void JuceDemoPluginAudioProcessor::processBlockBypassed (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    const int m_iBypassNumSamples  = buffer.getNumSamples();
    const int m_iBypassNumChannels = buffer.getNumChannels();
    float **m_ppBypassInputBuffer  = buffer.getArrayOfChannels();

    m_pMyProjectBypass->process(m_ppBypassInputBuffer, m_ppBypassInputBuffer, m_iBypassNumSamples);
    
    buffer.setDataToReferTo(m_ppBypassInputBuffer, m_iBypassNumChannels, m_iBypassNumSamples);
}
// =================================================================//


//==============================================================================
AudioProcessorEditor* JuceDemoPluginAudioProcessor::createEditor()
{
    return new JuceDemoPluginAudioProcessorEditor (this);
}

//==============================================================================
void JuceDemoPluginAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // Here's an example of how you can use XML to make it easy and more robust:

    // Create an outer XML element..
    XmlElement xml ("MYPLUGINSETTINGS");

    // add some attributes to it..
    xml.setAttribute ("uiWidth", lastUIWidth);
    xml.setAttribute ("uiHeight", lastUIHeight);
    xml.setAttribute ("modFreq", modFreq);
    xml.setAttribute ("modAmp", modAmp);

    // then use this helper function to stuff it into the binary blob and return it..
    copyXmlToBinary (xml, destData);
}

void JuceDemoPluginAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.

    // This getXmlFromBinary() helper function retrieves our XML from the binary blob..
    ScopedPointer<XmlElement> xmlState (getXmlFromBinary (data, sizeInBytes));

    if (xmlState != nullptr)
    {
        // make sure that it's actually our type of XML object..
        if (xmlState->hasTagName ("MYPLUGINSETTINGS"))
        {
            // ok, now pull out our parameters..
            lastUIWidth  = xmlState->getIntAttribute ("uiWidth", lastUIWidth);
            lastUIHeight = xmlState->getIntAttribute ("uiHeight", lastUIHeight);

            modFreq  = (float) xmlState->getDoubleAttribute ("modFreq", modFreq);
            modAmp = (float) xmlState->getDoubleAttribute ("modAmp", modAmp);
        }
    }
}

const String JuceDemoPluginAudioProcessor::getInputChannelName (const int channelIndex) const
{
    return String (channelIndex + 1);
}

const String JuceDemoPluginAudioProcessor::getOutputChannelName (const int channelIndex) const
{
    return String (channelIndex + 1);
}

bool JuceDemoPluginAudioProcessor::isInputChannelStereoPair (int /*index*/) const
{
    return true;
}

bool JuceDemoPluginAudioProcessor::isOutputChannelStereoPair (int /*index*/) const
{
    return true;
}

bool JuceDemoPluginAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool JuceDemoPluginAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool JuceDemoPluginAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double JuceDemoPluginAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

void JuceDemoPluginAudioProcessor::getPPMValue(float *meterValue)
{
    for (int i = 0; i < 2 ; i++)
    {
        meterValue[i] = output[i];
    }
   
}



//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new JuceDemoPluginAudioProcessor();
}
